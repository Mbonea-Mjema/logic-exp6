// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/04/2020 22:35:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Vend_FSM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Vend_FSM_vlg_sample_tst(
	_cancel,
	_choice,
	clock,
	coin,
	reset,
	sampler_tx
);
input  _cancel;
input [3:0] _choice;
input  clock;
input [1:0] coin;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(_cancel or _choice or clock or coin or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Vend_FSM_vlg_check_tst (
	_change,
	return,
	state,
	vend,
	sampler_rx
);
input [2:0] _change;
input [5:0] return;
input [5:0] state;
input [3:0] vend;
input sampler_rx;

reg [2:0] _change_expected;
reg [5:0] return_expected;
reg [5:0] state_expected;
reg [3:0] vend_expected;

reg [2:0] _change_prev;
reg [5:0] return_prev;
reg [5:0] state_prev;
reg [3:0] vend_prev;

reg [2:0] _change_expected_prev;
reg [5:0] state_expected_prev;
reg [3:0] vend_expected_prev;

reg [2:0] last__change_exp;
reg [5:0] last_state_exp;
reg [3:0] last_vend_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	_change_prev = _change;
	return_prev = return;
	state_prev = state;
	vend_prev = vend;
end

// update expected /o prevs

always @(trigger)
begin
	_change_expected_prev = _change_expected;
	state_expected_prev = state_expected;
	vend_expected_prev = vend_expected;
end


// expected _change[ 2 ]
initial
begin
	_change_expected[2] = 1'bX;
end 
// expected _change[ 1 ]
initial
begin
	_change_expected[1] = 1'bX;
end 
// expected _change[ 0 ]
initial
begin
	_change_expected[0] = 1'bX;
end 
// expected state[ 5 ]
initial
begin
	state_expected[5] = 1'bX;
end 
// expected state[ 4 ]
initial
begin
	state_expected[4] = 1'bX;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// expected vend[ 3 ]
initial
begin
	vend_expected[3] = 1'bX;
end 
// expected vend[ 2 ]
initial
begin
	vend_expected[2] = 1'bX;
end 
// expected vend[ 1 ]
initial
begin
	vend_expected[1] = 1'bX;
end 
// expected vend[ 0 ]
initial
begin
	vend_expected[0] = 1'bX;
end 
// generate trigger
always @(_change_expected or _change or return_expected or return or state_expected or state or vend_expected or vend)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected _change = %b | expected return = %b | expected state = %b | expected vend = %b | ",_change_expected_prev,return_expected_prev,state_expected_prev,vend_expected_prev);
	$display("| real _change = %b | real return = %b | real state = %b | real vend = %b | ",_change_prev,return_prev,state_prev,vend_prev);
`endif
	if (
		( _change_expected_prev[0] !== 1'bx ) && ( _change_prev[0] !== _change_expected_prev[0] )
		&& ((_change_expected_prev[0] !== last__change_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port _change[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", _change_expected_prev);
		$display ("     Real value = %b", _change_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last__change_exp[0] = _change_expected_prev[0];
	end
	if (
		( _change_expected_prev[1] !== 1'bx ) && ( _change_prev[1] !== _change_expected_prev[1] )
		&& ((_change_expected_prev[1] !== last__change_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port _change[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", _change_expected_prev);
		$display ("     Real value = %b", _change_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last__change_exp[1] = _change_expected_prev[1];
	end
	if (
		( _change_expected_prev[2] !== 1'bx ) && ( _change_prev[2] !== _change_expected_prev[2] )
		&& ((_change_expected_prev[2] !== last__change_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port _change[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", _change_expected_prev);
		$display ("     Real value = %b", _change_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last__change_exp[2] = _change_expected_prev[2];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end
	if (
		( state_expected_prev[4] !== 1'bx ) && ( state_prev[4] !== state_expected_prev[4] )
		&& ((state_expected_prev[4] !== last_state_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[4] = state_expected_prev[4];
	end
	if (
		( state_expected_prev[5] !== 1'bx ) && ( state_prev[5] !== state_expected_prev[5] )
		&& ((state_expected_prev[5] !== last_state_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[5] = state_expected_prev[5];
	end
	if (
		( vend_expected_prev[0] !== 1'bx ) && ( vend_prev[0] !== vend_expected_prev[0] )
		&& ((vend_expected_prev[0] !== last_vend_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vend[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vend_expected_prev);
		$display ("     Real value = %b", vend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vend_exp[0] = vend_expected_prev[0];
	end
	if (
		( vend_expected_prev[1] !== 1'bx ) && ( vend_prev[1] !== vend_expected_prev[1] )
		&& ((vend_expected_prev[1] !== last_vend_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vend[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vend_expected_prev);
		$display ("     Real value = %b", vend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vend_exp[1] = vend_expected_prev[1];
	end
	if (
		( vend_expected_prev[2] !== 1'bx ) && ( vend_prev[2] !== vend_expected_prev[2] )
		&& ((vend_expected_prev[2] !== last_vend_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vend[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vend_expected_prev);
		$display ("     Real value = %b", vend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vend_exp[2] = vend_expected_prev[2];
	end
	if (
		( vend_expected_prev[3] !== 1'bx ) && ( vend_prev[3] !== vend_expected_prev[3] )
		&& ((vend_expected_prev[3] !== last_vend_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vend[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vend_expected_prev);
		$display ("     Real value = %b", vend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vend_exp[3] = vend_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Vend_FSM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg _cancel;
reg [3:0] _choice;
reg clock;
reg [1:0] coin;
reg reset;
// wires                                               
wire [2:0] _change;
wire [5:0] return;
wire [5:0] state;
wire [3:0] vend;

wire sampler;                             

// assign statements (if any)                          
Vend_FSM i1 (
// port map - connection between master ports and signals/registers   
	._cancel(_cancel),
	._change(_change),
	._choice(_choice),
	.clock(clock),
	.coin(coin),
	.reset(reset),
	.\return (return),
	.state(state),
	.vend(vend)
);

// _cancel
initial
begin
	_cancel = 1'b0;
end 
// _choice[ 3 ]
initial
begin
	_choice[3] = 1'b0;
end 
// _choice[ 2 ]
initial
begin
	_choice[2] = 1'b0;
end 
// _choice[ 1 ]
initial
begin
	_choice[1] = 1'b0;
end 
// _choice[ 0 ]
initial
begin
	_choice[0] = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
// coin[ 1 ]
initial
begin
	coin[1] = 1'b0;
end 
// coin[ 0 ]
initial
begin
	coin[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

Vend_FSM_vlg_sample_tst tb_sample (
	._cancel(_cancel),
	._choice(_choice),
	.clock(clock),
	.coin(coin),
	.reset(reset),
	.sampler_tx(sampler)
);

Vend_FSM_vlg_check_tst tb_out(
	._change(_change),
	.return(return),
	.state(state),
	.vend(vend),
	.sampler_rx(sampler)
);
endmodule

